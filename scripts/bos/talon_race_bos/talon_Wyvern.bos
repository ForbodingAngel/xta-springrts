#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wing1, wing2, grabber, flamer1, flamer2, flamer3, flamer4, link, body;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;


wingson()
{
	if( TRUE )
	{
		turn wing1 to z-axis <0.000000> speed <61.192308>;
		turn wing2 to z-axis <0.000000> speed <61.192308>;
		wait-for-turn wing1 around z-axis;
		sleep 998;
	}
	sleep 44;
}

wingsoff()
{
	if( TRUE )
	{
		turn wing1 to z-axis <-90.000000> speed <61.192308>;
		turn wing2 to z-axis <90.000000> speed <61.192308>;
		sleep 998;
	}
	sleep 44;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

activatescr()
{
	move grabber to y-axis [0] speed [10];
}

deactivatescr()
{
	move grabber to y-axis [3] speed [10];
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = link;
}

Activate()
{
	start-script wingson();
}

Deactivate()
{
	start-script wingsoff();
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

EndTransport()
{
	start-script RequestState(1);
}

ProcessFlames()
{
	while( TRUE )
	{
		if( Static_Var_1 == 1 OR Static_Var_1 == 2 )
		{
			emit-sfx 0 from flamer1;
			emit-sfx 0 from flamer2;
			emit-sfx 0 from flamer3;
			emit-sfx 0 from flamer4;
		}
		sleep 67;
	}
}

StopMoving()
{
	signal 2;
	Static_Var_1 = 0;
}

MoveRate1()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Static_Var_1 = 1;
}

MoveRate2()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Static_Var_1 = 2;
}

MoveRate3()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Static_Var_1 = 3;
}

Killed(severity, corpsetype)
{
	if (get 75(get 71))
	{
		var count, min, max;
		min = get 69;
		max = get 70;
		for ( count = min; count < max; ++count )
		{
			drop-unit count;
		}
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode wing1 type SHATTER | BITMAP1;
		explode wing2 type SHATTER | BITMAP2;
		explode body type SHATTER | BITMAP3;
		explode grabber type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP4;
		explode flamer1 type FALL | SMOKE | FIRE | BITMAP5;
		explode flamer2 type FALL | SMOKE | FIRE | BITMAP1;
		explode flamer3 type FALL | SMOKE | FIRE | BITMAP2;
		explode link type FALL | SMOKE | FIRE | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode grabber type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP4;
		explode flamer1 type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP5;
		explode flamer2 type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP1;
		explode flamer3 type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP2;
		explode link type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode grabber type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP4;
		explode flamer1 type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP5;
		explode flamer2 type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP1;
		explode flamer3 type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP2;
		explode link type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode grabber type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP4;
	explode flamer1 type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP5;
	explode flamer2 type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP1;
	explode flamer3 type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP2;
	explode link type FALL | EXPLODE_ON_HIT | SMOKE | FIRE | BITMAP3;
}
