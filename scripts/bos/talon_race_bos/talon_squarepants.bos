#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, barrel, sleeve, wake1, wake2, wake3, wake4, wake5, torp, launch;

static-var  restore_delay, depth, x, sleepy, wait;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4
#define SIG_AIM_2			8
#define SIG_F				16


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	if( depth != 3 )
	{
		{
			healthpercent = get HEALTH;
			if( healthpercent < 66 )
			{
				smoketype = 256 | 2;
				if( Rand( 1, 66 ) < healthpercent )
				{
					smoketype = 256 | 1;
				}
				emit-sfx smoketype from base;
			}
			sleeptime = healthpercent * 50;
			if( sleeptime < 200 )
			{
				sleeptime = 200;
			}
			sleep sleeptime;
		}
	}
	if( depth == 3 )
	{
		healthpercent = get HEALTH;
		sleeptime = healthpercent*healthpercent;
		if( healthpercent < 66 )
		{
			emit-sfx 256 | 3 from base;
			sleep sleeptime;
			emit-sfx 256 | 3 from barrel;
			if( Rand( 1, 66 ) > healthpercent )
			{
				emit-sfx 256 | 3 from wake2;
				sleep sleeptime;
				emit-sfx 256 | 3 from wake3;
				sleep sleeptime;
				emit-sfx 256 | 3 from wake4;
				sleep sleeptime;
				emit-sfx 256 | 3 from wake5;
				sleep sleeptime;
				emit-sfx 256 | 3 from base;
				sleep sleeptime;
				emit-sfx 256 | 3 from barrel;
				sleep sleeptime;
				emit-sfx 256 | 3 from turret;
				sleep sleeptime;
				emit-sfx 256 | 3 from flare;
				sleep sleeptime;
				emit-sfx 256 | 3 from sleeve;
				sleep sleeptime;
			}
		}
	}
	start-script smokeunit();
}

/*RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}*/

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

Create()
{
	sleepy=300;
	wait=0;
	hide flare;
	dont-cache flare;
	restore_delay = 3000;
	start-script SmokeUnit();
	x = 0;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep 1000;
	spin barrel around z-axis speed 0 accelerate <-10>;
	sleepy = 300;
	sleep 2000;
	turn turret to y-axis <0.000000> speed <90.021978>;
	turn sleeve to x-axis <0.000000> speed <50.010989>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while(depth == 3)
	{
		sleep 100;
	}
	if(sleepy >= 1)
	{
		turn turret to y-axis <180> + heading speed (<40000> / sleepy);
		turn sleeve to x-axis pitch speed (<40000> / sleepy);
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	if(sleepy < 1)
	{
		turn turret to y-axis <180> + heading now;
		turn sleeve to x-axis pitch now;
	}
	start-script RestoreAfterDelay();
	while(wait)
	{
		sleep 1;
	}
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	sleepy = 300;
	while(depth != 3)
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <100.021978>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Flarez()
{
	signal SIG_F;
	set-signal-mask SIG_F;
	emit-sfx UNIT_SFX1 from flare;
	sleep 75;
	move sleeve to z-axis [0.5] now;
	move sleeve to z-axis [0.000000] speed [1.000000];
	move barrel to z-axis [0.5] now;
	move barrel to z-axis [0.000000] speed [1.000000];
}

FirePrimary()
{
	wait=1;
	start-script Flarez();
	if(sleepy > 0)
	{
		spin barrel around z-axis speed <600> - sleepy * <1>;
	}
	sleep sleepy;
	sleepy = sleepy - 2;
	wait=0;
}

bubble1()
{
	x = 0;
	while ( x < 5 )
	{
		emit-sfx 256 | 3 from launch;
		sleep 200;
		++x;
	}
}

FireTertiary()
{
	move torp to z-axis [-0.5] now;
	move torp to z-axis [0.000000] speed [3.000000];
	start-script bubble1();
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromTertiary(piecenum)
{
	piecenum = launch;
}

QueryTertiary(piecenum)
{
	piecenum = launch;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		sleep 100;
		emit-sfx 2 from wake1;
		emit-sfx 256 | 3 from wake3;
		sleep 100;
		emit-sfx 2 from wake1;
		emit-sfx 256 | 3 from wake4;
		sleep 100;
		emit-sfx 2 from wake1;
		emit-sfx 256 | 3 from wake5;
		sleep 100;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

setSFXoccupy(Func_Var_1)
{
	depth = Func_Var_1;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1 + ( depth == 1 || depth == 2 );
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type BITMAPONLY | BITMAP3;
		explode sleeve type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | BITMAP3;
		explode sleeve type FALL | BITMAP4;
		explode turret type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
