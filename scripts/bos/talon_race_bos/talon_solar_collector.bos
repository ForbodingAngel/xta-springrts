#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, door3, door4;

static-var  statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	set ARMORED to 0;
	turn door1 to x-axis <90> speed <60.010989>;
	turn door2 to x-axis <-90> speed <60.010989>;
	turn door3 to x-axis <-90> speed <60.010989>;
	turn door4 to x-axis <90> speed <60.010989>;
	wait-for-turn door1 around x-axis;
	move door1 to y-axis [-12] speed [6];
	move door2 to y-axis [-12] speed [6];
	move door3 to y-axis [-12] speed [6];
	move door4 to y-axis [-12] speed [6];
	wait-for-move door1 along y-axis;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
}

Stop()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	move door1 to y-axis [0] speed [12];
	move door2 to y-axis [0] speed [12];
	move door3 to y-axis [0] speed [12];
	move door4 to y-axis [0] speed [12];
	wait-for-move door1 along y-axis;
	turn door1 to x-axis <0.000000> speed <120.027473>;
	turn door2 to x-axis <0.000000> speed <120.027473>;
	turn door3 to x-axis <0.000000> speed <120.027473>;
	turn door4 to x-axis <0.000000> speed <120.027473>;
	wait-for-turn door1 around x-axis;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	set ARMORED to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 2;
	set-signal-mask 2;
	if (!(get BUILD_PERCENT_LEFT))
	{
		set ACTIVATION to 0;
		sleep 8000;
		set ACTIVATION to 1;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP3;
		explode door4 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode door1 type FALL | BITMAP1;
		explode door2 type FALL | BITMAP2;
		explode door3 type FALL | BITMAP3;
		explode door4 type FALL | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
}
