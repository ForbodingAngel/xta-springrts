#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, nano1, nano2, wheel1, wheel2, wheel3, lath1, lath2;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, spray;

// Signal definitions
#define SIG_MOVE			2

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

activatescr()
{
	move turret to y-axis [5.000000] speed [16.000000];
	wait-for-move turret along y-axis;
	move nano1 to z-axis [2.25] speed [16.000000];
	move nano2 to z-axis [2.25] speed [16.000000];
	wait-for-move nano1 along z-axis;
	sleep 20;
}

deactivatescr()
{
	move nano1 to z-axis [0] speed [4.000000];
	move nano2 to z-axis [0] speed [4.000000];
	wait-for-move nano1 along z-axis;
	move turret to y-axis [0] speed [4.000000];
	wait-for-move turret along y-axis;
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	spin wheel1 around x-axis speed <160> accelerate <10>;
	spin wheel2 around x-axis speed <170> accelerate <10>;
	spin wheel3 around x-axis speed <165> accelerate <10>;
}

StopMoving()
{
	spin wheel1 around x-axis speed <0> accelerate <10>;
	spin wheel2 around x-axis speed <0> accelerate <10>;
	spin wheel3 around x-axis speed <0> accelerate <10>;
	signal SIG_MOVE;
}

Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <160.038462>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.038462>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	spray = 1;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( spray == 1 )
	{
		piecenum = lath1;
	}
	if( spray == 2 )
	{
		piecenum = lath2;
	}
	++spray;
	if( spray == 3 )
	{
		spray = 1;
	}
}


TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lath2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lath1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP2;
		explode body type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wheel1 type SHATTER | BITMAP1;
		explode wheel2 type SHATTER | BITMAP2;
		explode wheel3 type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lath2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lath1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP2;
		explode body type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wheel1 type SHATTER | BITMAP1;
		explode wheel2 type SHATTER | BITMAP2;
		explode wheel3 type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lath2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lath1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP2;
		explode body type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wheel1 type SHATTER | BITMAP1;
		explode wheel2 type SHATTER | BITMAP2;
		explode wheel3 type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode lath2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lath1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP2;
	explode body type SHATTER | BITMAP1;
	explode wheel1 type SHATTER | BITMAP1;
	explode wheel2 type SHATTER | BITMAP2;
	explode wheel3 type SHATTER | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}