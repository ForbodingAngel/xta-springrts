#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  light, beam1, beam2, base, slip, door1, door2, nanoarm1, nanoarm2, groundplate, armbase1, armbase2, smoker, spinner;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging, bSmoking;

// Signal definitions
#define SIG_ACTIVATE			2
Smoke()
{
	emit-sfx 256 | 2 from smoker;
	sleep 100;
	emit-sfx 256 | 1 from smoker;
	sleep 100;
	if( bsmoking == 1 )
	{
		start-script Smoke();
	}
}

activatescr()
{
	if( TRUE )
	{
		dont-cache door2;
		dont-cache door1;
		dont-cache nanoarm1;
		dont-cache nanoarm2;
		set ARMORED to 0;
	}
	if( TRUE )
	{
		turn door2 to y-axis <-90> speed <100>;
		turn door1 to y-axis <90> speed <100>;
		wait-for-turn door1 around y-axis;
	}
	if( TRUE )
	{
		turn armbase1 to y-axis <45> speed <50>;
		turn armbase2 to y-axis <-45> speed <50>;
		wait-for-turn armbase1 around y-axis;
		wait-for-turn armbase2 around y-axis;
	}
	if( TRUE )
	{
		turn nanoarm1 to x-axis <-90> speed <100>;
		turn nanoarm2 to x-axis <-90> speed <100>;
		wait-for-turn nanoarm1 around x-axis;
	}
	if( TRUE )
	{
		cache door2;
		cache door1;
		cache nanoarm1;
		cache nanoarm2;
	}
	sleep 37;
}

deactivatescr()
{
	if( TRUE )
	{
		dont-cache door2;
		dont-cache door1;
		dont-cache nanoarm1;
		dont-cache nanoarm2;
	}
	if( TRUE )
	{
		turn nanoarm1 to x-axis <0> speed <50>;
		turn nanoarm2 to x-axis <0> speed <50>;
		wait-for-turn nanoarm1 around x-axis;
	}
	if( TRUE )
	{
		turn armbase1 to y-axis <0> speed <50>;
		turn armbase2 to y-axis <0> speed <50>;
		turn door2 to y-axis <0> speed <50>;
		turn door1 to y-axis <0> speed <50>;
		wait-for-turn door1 around y-axis;
	}
	if( TRUE )
	{
		cache door2;
		cache door1;
		cache nanoarm1;
		cache nanoarm2;
		set ARMORED to 1;
	}
	sleep 37;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	bsmoking = 1;
	call-script Smoke();
}

CloseYard()
{
	bsmoking = 0;
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	sleep 15000;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade light;
	dont-cache light;
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade nanoarm1;
	dont-shade nanoarm2;	
	unitviewer = FALSE;
	spray = 0;
	call-script InitState();
	start-script SmokeUnit();
	bsmoking = 0;
	spin spinner around y-axis speed <5000>;
	
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryBuildInfo(piecenum)
{
	piecenum = groundplate;
}

SweetSpot(piecenum)
{
	piecenum = light;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode nanoarm1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nanoarm2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode nanoarm1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nanoarm2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode nanoarm1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode nanoarm2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode nanoarm1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode nanoarm2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
}
