#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fork, body, w1, w2, w3, w4, w5,
       w6, w7, w8, w9, w10, w11, w12, wakes,
       s1, s2;

static-var  Static_Var_1, Static_Var_4;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

#define SMOKEPIECE1 base

#include "StateChg.h"

WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_4 )
			move base to y-axis [2.250000] speed [2.50000];
		else
			move base to y-axis [-0.250000] speed [2.50000];
		Static_Var_4 = !Static_Var_4;
		sleep 750;
	}
}
BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [1.000000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 80 / 40;
		}
		turn body to z-axis Func_Var_3 speed <60.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}
#include "SmokeUnit.h"

HitByWeapon(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn body to z-axis <0.010989> * anglez speed <105.016484>;
	turn body to x-axis <0.010989> * anglex speed <105.016484>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <30.005495>;
	turn body to x-axis <0.000000> speed <30.005495>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	signal SIG_MOVE;
}

waking()
{
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 3 from w9;
			emit-sfx 3 from w10;
			emit-sfx 3 from w11;
			emit-sfx 3 from w12;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
			emit-sfx 5 from w9;
			emit-sfx 5 from w10;
			emit-sfx 5 from w11;
			emit-sfx 5 from w12;
		}
		sleep 325;
	}
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	start-script waking();
	start-script SmokeUnit();
	start-script BankClerck();
	start-script WobbleUnit();
	
}

restore()
{
	sleep 250;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script restore();
	while( Static_Var_1 == 0 )
	{
		sleep 1000;
	}
	return (1);
}

FirePrimary()
{
	if( !Rand( 0, 4 ) )
	{
	}
	if( Rand( 0, 2 ) )
	{
	}
	if( Rand( 0, 2 ) )
	{
	}
	if( Rand( 0, 2 ) )
	{
	}
	if( Rand( 0, 1 ) )
	{
	}
	if( Rand( 0, 1 ) )
	{
	}
	if( Rand( 0, 1 ) )
	{
	}
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

Activate()
{
	spin fork around y-axis speed <200.016484>;
}

Deactivate()
{
	spin fork around y-axis speed <0.000000>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 + ( Static_Var_1 == 1 OR Static_Var_1 == 2 );
		explode base type BITMAPONLY | BITMAP1;
		explode fork type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP2;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode fork type SHATTER | BITMAP2;
		explode body type BITMAPONLY | BITMAP2;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode fork type SHATTER | BITMAP2;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode w1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode w12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
