#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, body, base, barrel, wheel1, wheel2;

static-var  Static_Var_1, bmoving;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4
#define BANK_MORE 80
#define BANK_LESS 40
#define BANK_DAMP_SPEED <60>
#define BANK_REFRESH 300// Put some time long enough for the unit to have travelled a while, but short enough so the script doesn't have a too long reaction time
#define BANK_SIGNIFICATIVE_SPEED [1]// Actually, it's not a speed, but a distance, the distance covered during BANK_REFRESH. If that distance is too low, the difference between the two xz is deemed too low to get a significative angle out of it. Since half of digit are lost when x and z get packed into xz, any distance under 65536=[0.4] will lose all its significative digits and so will be unuseable.

BankClerck()
{
	var present_xz, past_xz, banking_angle;
	while(1)
	{
		present_xz=get PIECE_XZ(base);
		banking_angle=0;
		if (get XZ_HYPOT(present_xz - past_xz)>=BANK_SIGNIFICATIVE_SPEED)
			{
			banking_angle=(0 - (((get XZ_ATAN(past_xz - present_xz))*BANK_MORE)/BANK_LESS));
			}
		turn body to z-axis banking_angle speed BANK_DAMP_SPEED;
		past_xz=present_xz;
		sleep BANK_REFRESH;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bmoving=1;
	spin wheel1 around x-axis speed <900> accelerate <90>;
	spin wheel2 around x-axis speed <900> accelerate <90>;
}

StopMoving()
{
	signal SIG_MOVE;
	bmoving=0;
	spin wheel1 around x-axis speed <0> accelerate <-90>;
	spin wheel2 around x-axis speed <0> accelerate <-90>;
}

waking()
{
	while( TRUE )
	{
		if(bmoving)
		{
			emit-sfx 256 | 1 from wheel1;
			emit-sfx 256 | 1 from wheel2;
		}
		sleep 175;
	}
}

Create()
{
	//cool=0;
	bmoving=0;
	//start-script waking();
	hide flare;
	dont-cache flare;
	start-script SmokeUnit();
	start-script BankClerck();
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	//while(cool)
	//{
	//	sleep 10;
	//}
	return (1);
}

FirePrimary()
{
	//cool = 1;
	move barrel to z-axis [-1] now;
	show flare;
	sleep 150;
	hide flare;
	move barrel to z-axis [0.000000] speed [3.000000];
	//cool = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	corpsetype = rand(1,6);
	if( severity <= 25 )
	{
		explode barrel type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;

		return (0);
	}
	if( severity <= 50 )
	{
		explode barrel type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;

		return (0);
	}
	if( severity <= 99 )
	{
		explode barrel type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode wheel1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode barrel type BITMAPONLY | BITMAP1;
	explode body type BITMAPONLY | BITMAP2;
	explode wheel1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
