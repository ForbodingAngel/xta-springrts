#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, gun, door1, door2, door3, door4, stand,
       turret, barrel, flare;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging, sleepy, wait;

// Signal definitions
#define SIG_AIM				2
#define SIG_F				4


activatescr()
{
	if( TRUE )
	{
		turn door2 to z-axis <0> speed <222>;
		turn door4 to z-axis <0> speed <222>;
		turn door3 to x-axis <0> speed <222>;
		turn door1 to x-axis <0> speed <222>;
		move turret to y-axis [0] speed [66];
		wait-for-turn door1 around x-axis;
		turn gun to x-axis <-90> speed <222>;
		wait-for-turn gun around x-axis;
		wait-for-move turret along y-axis;
		sleep 10;
	}
	sleep 25;
}

deactivatescr()
{
	if( TRUE )
	{
		move turret to y-axis [-3] speed [8];
		turn gun to x-axis <-90> speed <288>;
		turn turret to y-axis <0> speed <288>;
		wait-for-turn gun around x-axis;
		wait-for-move turret along y-axis;
		wait-for-turn turret around y-axis;
		turn door2 to z-axis <-90> speed <288>;
		turn door4 to z-axis <90> speed <288>;
		turn door3 to x-axis <90> speed <288>;
		turn door1 to x-axis <-90> speed <288>;
		wait-for-turn door1 around x-axis;
		sleep 320;
	}
	sleep 17;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep 1000;
	spin barrel around z-axis speed 0 accelerate <-10>;
	sleepy=100;
	sleep 1000;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	sleepy = 100;
	wait=0;
	hide flare;
	dont-cache flare;
	Static_Var_1 = 1;
	start-script SmokeUnit();
	call-script InitState();
	start-script RequestState(0);
	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	if(sleepy > 0)
	{
		turn turret to y-axis heading speed (<40000> / sleepy);
		turn gun to x-axis <0.000000> - pitch speed (<40000> / sleepy);
		wait-for-turn turret around y-axis;
		wait-for-turn gun around x-axis;
	}
	if(sleepy <= 0)
	{
		turn turret to y-axis heading now;
		turn gun to x-axis <0.000000> - pitch now;
	}
	while(wait)
	{
		sleep 1;
	}
	start-script RestoreAfterDelay();
	return (1);
}

flarez()
{
	signal SIG_F;
	set-signal-mask SIG_F;
	show flare;
	sleep 75;
	hide flare;
	
	move gun to z-axis [-1.000000] now;
	move gun to z-axis [0.000000] speed [6.000000];
}

FirePrimary()
{
	wait=1;
	start-script flarez();
	if(sleepy > 0)
	{
		spin barrel around z-axis speed <600> - sleepy * <1>;
	}
	sleep sleepy;
	sleepy = sleepy - 2;
	wait=0;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP2;
		explode door4 type BITMAPONLY | BITMAP2;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP3;
		explode door3 type FALL | BITMAP3;
		explode door4 type FALL | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 4;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode stand type BITMAPONLY | BITMAP5;
	explode turret type BITMAPONLY | BITMAP1;
}
