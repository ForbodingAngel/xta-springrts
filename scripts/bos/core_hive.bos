#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad1, pad2, dish, wake1, wake2, ground,
	   ignite1, ignite2, ignite3, ignite4, ignite5, ignite6, light1;

static-var  Static_Var_1, landed, prepare;

// Signal definitions
#define SIG_MOVE			2;
#define SIG_LIGHTS			4;

Lights()
{
	set-signal-mask SIG_LIGHTS;
	while( TRUE )
	{
		if (!landed && prepare)
		{
			emit-sfx 1025 from light1;
			sleep 1200;
		}
		if (landed == 1)
		{
			emit-sfx 1025 from light1;
			sleep 600;
		}
		if (landed == 2)
		{
			emit-sfx 1026 from light1;
			sleep 100;
		}
	}
}

UnitLanded(pieceNum)
{
	if (landed == 1)
		{
			landed = 2;
		}
	if (!landed)
		{
			landed = 1;
		}
	if (prepare == 2)
		{
			prepare = 1;
		}
	if (prepare == 1)
		{
			prepare = 0;
		}
}

UnitTookOff()
{
	if (landed == 2)
		{
			landed = 1;
		}
	if (landed == 1)
		{
			landed = 0;
		}
	
	if (!landed){
		signal SIG_LIGHTS;
	}
	
}

PrepareLanding()
{
	if (prepare == 1)
	{
		prepare = 2;
	}
	if (!prepare)
	{
		prepare = 1;
	}
	if (!landed){
	start-script Lights();
	}
}

SetDirection(heading)
{
	var spd;
	spd = get ABS(heading);
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
}

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.0>;
		move ground to y-axis [-1.1] speed [0.2];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.0>;
		move ground to y-axis [-1.3] speed [0.2];
		wait-for-move ground along y-axis;
		move ground to y-axis [-1.1] speed [0.2];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.0>;
		move ground to y-axis [-1.3] speed [0.2];
		wait-for-move ground along y-axis;
	}
}

FlameControl(bHealth)
{
	while( TRUE )
	{
		bHealth = get HEALTH;
		if( bHealth <= 80 )
		{
			emit-sfx UNIT_SFX1 from ignite1;
			if( bHealth <= 65 ){
				emit-sfx UNIT_SFX1 from ignite2;
				if( bHealth <= 50 ){
					emit-sfx UNIT_SFX1 from ignite3;
					if( bHealth <= 35 ){
						emit-sfx UNIT_SFX1 from ignite4;
						if( bHealth <= 20 ){
							emit-sfx UNIT_SFX1 from ignite5;
							if( bHealth <= 10 )	emit-sfx UNIT_SFX1 from ignite6;
						}
					}
				}
			}
			sleep 66;
		}
		else
		{
			sleep 333;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script FlameControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Activate()
{
	spin dish around y-axis speed <60.010989> accelerate <3.010989>;
}

Deactivate()
{
	stop-spin dish around y-axis decelerate <3.010989>;
}

Create()
{
	hide ignite1;
	hide ignite2;
	hide ignite3;
	hide ignite4;
	hide ignite5;
	hide ignite6;
	Static_Var_1 = 0;
	move ground to y-axis [-1.2] now;
	start-script SmokeUnit();
	start-script RockOnWaves();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if (waketime < 50) waketime = 50;
		sleep 15000/waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = 1;
	Func_Var_2 = 2;
	Static_Var_1 = !Static_Var_1;
	if( Static_Var_1 )
	{
		Func_Var_1 = 2;
		Func_Var_2 = 1;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type BITMAPONLY | BITMAP2;
		explode pad1 type BITMAPONLY | BITMAP3;
		explode pad2 type BITMAPONLY | BITMAP4;
		explode wake1 type BITMAPONLY | BITMAP5;
		explode wake2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type SHATTER | BITMAP2;
		explode pad1 type FALL | BITMAP3;
		explode pad2 type FALL | BITMAP4;
		explode wake1 type FALL | BITMAP5;
		explode wake2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type SHATTER | BITMAP2;
		explode pad1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pad2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode dish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode pad1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pad2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
